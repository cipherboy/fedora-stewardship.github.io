#!/usr/bin/python3

import argparse
import datetime
import os
import subprocess


def read_state() -> str:
    try:
        with open(".compose") as file:
            return file.read().strip()
    except FileNotFoundError:
        return ""


def write_state(compose: str):
    with open(".compose", "w") as file:
        file.write(compose.strip())


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--force", "-f", action="store_const", const=True, default=False,
        help="force regenerating even if the compose value has not changed",
    )
    parser.add_argument(
        "--koji", "-k", action="store_const", const=True, default=False,
        help="use data from koji buildroot instead of the rawhide repos",
    )

    args = vars(parser.parse_args())
    force = args["force"]
    koji = args["koji"]

    cur_dir = os.getcwd()
    cur_com = read_state()

    os.chdir("scripts")

    try:
        ret = subprocess.run(["./get_current_compose.py"], stdout=subprocess.PIPE)

        try:
            ret.check_returncode()
            compose = ret.stdout.decode().strip()
        except subprocess.CalledProcessError:
            print(ret.stdout.decode())
            return 1

        if compose == cur_com and not force and not koji:
            print("Data has already been generated for this compose.")
            print("Use the '--force' switch to override this check.")
            return 0

        if not koji:
            subprocess.run(["./sig_report.py", compose]).check_returncode()
        else:
            timestamp = datetime.datetime.utcnow().strftime("%Y%m%d-%H%M%S")
            subprocess.run(["./sig_report.py", "--koji", f"{compose}-koji-{timestamp}"])

        subprocess.run(["./pr_report.py"]).check_returncode()
        subprocess.run(["./sig_backlog.py"]).check_returncode()

    except subprocess.CalledProcessError as error:
        raise error

    finally:
        os.chdir(cur_dir)

    write_state(compose)

    # only commit files that are automatically generated by this script
    subprocess.run([
        "git", "add",
        ".compose",
        "assets/*.png",
        "_pages/pr-report.md",
        "_pages/sig-backlog.md",
        "_pages/sig-overview.md",
        "_pages/sig-report.html",
    ])

    commit_msg = f"{datetime.datetime.utcnow().strftime('%Y-%m-%d')} (rawhide:{compose})"
    subprocess.run(["git", "commit", "-a", "-m", commit_msg])

    subprocess.run(["git", "push"])

    return 0


if __name__ == "__main__":
    exit(main())
